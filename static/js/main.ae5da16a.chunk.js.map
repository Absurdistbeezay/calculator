{"version":3,"sources":["components/button.js","components/display-panel.js","App.js","serviceWorker.js","index.js"],"names":["Button","props","state","values","val","this","calculate","reset","setState","eval","result","className","id","onClick","Component","DisplayPanel","App","React","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"u0CAKMA,O,qBACF,gBAAYC,GAAQ,IAAD,wKACf,sUAAMA,KACDC,MAAQ,CACTC,OAAQ,IAHG,E,yVAOXC,GACJ,OAAQA,GACJ,IAAK,IACDC,KAAKC,YACL,MACJ,IAAK,IACDD,KAAKE,QACL,MACJ,QAEIF,KAAKG,SAAS,CACVL,OAAQE,KAAKH,MAAMC,OAASC,O,4CAQd,KAAtBC,KAAKH,MAAMC,QAGfE,KAAKG,SAAS,CACVL,OAAQM,KAAKJ,KAAKH,MAAMC,Y,8BAK5BE,KAAKG,SAAS,CACVL,OAAQ,O,+BAGN,IAAD,OACL,OACI,sHACI,2DAAC,8CAAD,CAAcO,OAAQL,KAAKH,MAAMC,SACjC,kEAAKQ,UAAU,iBACX,kEAAKA,UAAU,OACX,qEAAQA,UAAU,iBAAiBC,GAAG,SAASC,QAAS,WAAQ,EAAKA,QAAQ,OAA7E,KACA,qEAAQF,UAAU,MAAMC,GAAG,QAAQC,QAAS,WAAQ,EAAKA,QAAQ,OAAjE,KACA,qEAAQF,UAAU,MAAMC,GAAG,QAAQC,QAAS,WAAQ,EAAKA,QAAQ,OAAjE,KACA,qEAAQF,UAAU,MAAMC,GAAG,OAAOC,QAAS,WAAQ,EAAKA,QAAQ,OAAhE,MAEJ,kEAAKF,UAAU,OACX,qEAAQA,UAAU,iBAAiBC,GAAG,WAAWC,QAAS,WAAQ,EAAKA,QAAQ,OAA/E,KACA,qEAAQF,UAAU,MAAMC,GAAG,OAAOC,QAAS,WAAQ,EAAKA,QAAQ,OAAhE,KACA,qEAAQF,UAAU,MAAMC,GAAG,OAAOC,QAAS,WAAQ,EAAKA,QAAQ,OAAhE,KACA,qEAAQF,UAAU,MAAME,QAAS,WAAQ,EAAKA,QAAQ,OAAtD,MAEJ,kEAAKF,UAAU,OACX,qEAAQA,UAAU,iBAAiBC,GAAG,WAAWC,QAAS,WAAQ,EAAKA,QAAQ,OAA/E,KACA,qEAAQF,UAAU,MAAMC,GAAG,MAAMC,QAAS,WAAQ,EAAKA,QAAQ,OAA/D,KACA,qEAAQF,UAAU,MAAMC,GAAG,MAAMC,QAAS,WAAQ,EAAKA,QAAQ,OAA/D,KACA,qEAAQF,UAAU,MAAME,QAAS,WAAQ,EAAKA,QAAQ,OAAtD,MAEJ,kEAAKF,UAAU,OACX,qEAAQA,UAAU,iBAAiBC,GAAG,MAAMC,QAAS,WAAQ,EAAKA,QAAQ,OAA1E,KACA,qEAAQF,UAAU,cAAcC,GAAG,QAAQC,QAAS,WAAQ,EAAKA,QAAQ,OAAzE,KACA,qEAAQF,UAAU,MAAMC,GAAG,OAAOC,QAAS,WAAQ,EAAKA,QAAQ,OAAhE,KACA,qEAAQF,UAAU,gBAAgBC,GAAG,SAASC,QAAS,WAAQ,EAAKA,QAAQ,OAA5E,MAEJ,kEAAKF,UAAU,kBAAiB,qEAAQA,UAAU,MAAMC,GAAG,UAAUC,QAAS,WAAQ,EAAKA,QAAQ,OAAnE,Y,QArE/BC,8CA4ENd,8B,6BCjFf,0BAYee,IATM,SAACd,GAAW,IACvBS,EAAWT,EAAXS,OACN,OACI,yBAAKC,UAAU,gBAAgBC,GAAG,WAC7BF,K,+OCWEM,E,iLAZX,OACE,yBAAKL,UAAU,OACb,yBAAKA,UAAU,cACb,kBAAC,IAAD,Y,GALQM,IAAMH,WCQJI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.ae5da16a.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport DisplayPanel from './display-panel';\r\n\r\nimport \"./button.css\";\r\n\r\nclass Button extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            values: \"\"\r\n        }\r\n    }\r\n\r\n    onClick(val) {\r\n        switch (val) {\r\n            case \"=\":\r\n                this.calculate();\r\n                break;\r\n            case \"c\":\r\n                this.reset();\r\n                break;\r\n            default:\r\n\r\n                this.setState({\r\n                    values: this.state.values + val\r\n                })\r\n\r\n\r\n        }\r\n    }\r\n\r\n    calculate() {\r\n        if (this.state.values === \"\" || undefined) {\r\n            return;\r\n        }\r\n        this.setState({\r\n            values: eval(this.state.values)\r\n        })\r\n    }\r\n\r\n    reset() {\r\n        this.setState({\r\n            values: \"\"\r\n        })\r\n    }\r\n    render() {\r\n        return (\r\n            <>\r\n                <DisplayPanel result={this.state.values} />\r\n                <div className=\"buttons-panel\">\r\n                    <div className=\"row\">\r\n                        <button className=\"btn btn-yellow\" id=\"divide\" onClick={() => { this.onClick(\"/\") }}>/</button>\r\n                        <button className=\"btn\" id=\"seven\" onClick={() => { this.onClick(\"7\") }}>7</button>\r\n                        <button className=\"btn\" id=\"eight\" onClick={() => { this.onClick(\"8\") }}>8</button>\r\n                        <button className=\"btn\" id=\"nine\" onClick={() => { this.onClick(\"9\") }}>9</button>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <button className=\"btn btn-yellow\" id=\"multiply\" onClick={() => { this.onClick(\"*\") }}>x</button>\r\n                        <button className=\"btn\" id=\"four\" onClick={() => { this.onClick(\"4\") }}>4</button>\r\n                        <button className=\"btn\" id=\"five\" onClick={() => { this.onClick(\"5\") }}>5</button>\r\n                        <button className=\"btn\" onClick={() => { this.onClick(\"6\") }}>6</button>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <button className=\"btn btn-yellow\" id=\"subtract\" onClick={() => { this.onClick(\"-\") }}>-</button>\r\n                        <button className=\"btn\" id=\"one\" onClick={() => { this.onClick(\"1\") }}>1</button>\r\n                        <button className=\"btn\" id=\"two\" onClick={() => { this.onClick(\"2\") }}>2</button>\r\n                        <button className=\"btn\" onClick={() => { this.onClick(\"3\") }}>3</button>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <button className=\"btn btn-yellow\" id=\"add\" onClick={() => { this.onClick(\"+\") }}>+</button>\r\n                        <button className=\"btn btn-red\" id=\"clear\" onClick={() => { this.onClick(\"c\") }}>c</button>\r\n                        <button className=\"btn\" id=\"zero\" onClick={() => { this.onClick(\"0\") }}>0</button>\r\n                        <button className=\"btn btn-green\" id=\"equals\" onClick={() => { this.onClick(\"=\") }}>=</button>\r\n                    </div>\r\n                    <div className=\"row row-center\"><button className=\"btn\" id=\"decimal\" onClick={() => { this.onClick(\".\") }}>.</button></div>\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Button;\r\n","import React from 'react';\r\nimport './display-panel.css';\r\n\r\nconst DisplayPanel = (props) => {\r\n    let { result } = props;\r\n    return (\r\n        <div className=\"display-panel\" id=\"display\">\r\n            {result}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DisplayPanel;","import React from 'react';\nimport './App.css';\nimport Button from './components/button';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"main-frame\">\n          <Button />\n        </div>\n\n      </div>\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}